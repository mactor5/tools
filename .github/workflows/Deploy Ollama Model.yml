name: Deploy Ollama Model

on:
  workflow_dispatch:
    inputs:
      model:
        description: '大模型名称'
        required: true
        default: 'gpt-oss:20b'
      embedding_model:
        description: '嵌入模型名称'
        required: true
        default: 'bge-m3'
        

jobs:
  DeployLLM:
    runs-on: ubuntu-latest
    steps:
      - name: 最大化磁盘空间
        uses: easimon/maximize-build-space@master
        with:
          overprovision-lvm: 'true'
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: 迁出代码
        uses: actions/checkout@v3

      - name: 检查服务器配置
        id: check_server
        run: |
          echo -e "已知CPU型号(性能降序): 7763，8370C，8272CL，8171M，E5-2673\n"
          echo "--------------------------CPU信息--------------------------"
          echo "CPU物理数量: $(cat /proc/cpuinfo | grep 'physical id' | sort | uniq | wc -l)"
          echo "CPU核心数量: $(nproc)"
          echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
          echo "--------------------------内存信息--------------------------"
          echo "已安装内存详细信息:"
          echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
          echo "--------------------------硬盘信息--------------------------"
          echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT
          echo "--------------------------网络信息--------------------------"
          curl -s -4 ipinfo.io > raw_net_info
          cat raw_net_info | jq -r '
            "IP地址           \(.ip)\n" +
            "所在城市         \(.city)\n" +
            "所在区域         \(.region)\n" +
            "国家             \(.country)\n" +
            "地理位置         \(.loc)\n" +
            "组织             \(.org)\n" +
            "邮政编码         \(.postal)\n" +
            "所在时区         \(.timezone)\n"'

          echo "public_ip=$(cat raw_net_info | jq -r '.ip')" >> $GITHUB_OUTPUT
          echo "city=$(cat raw_net_info | jq -r '.city')" >> $GITHUB_OUTPUT
          echo "region=$(cat raw_net_info | jq -r '.region')" >> $GITHUB_OUTPUT
          echo "country=$(cat raw_net_info | jq -r '.country')" >> $GITHUB_OUTPUT
          echo "loc=$(cat raw_net_info | jq -r '.loc')" >> $GITHUB_OUTPUT
          echo "org=$(cat raw_net_info | jq -r '.org')" >> $GITHUB_OUTPUT
          echo "postal=$(cat raw_net_info | jq -r '.postal')" >> $GITHUB_OUTPUT
          echo "timezone=$(cat raw_net_info | jq -r '.timezone')" >> $GITHUB_OUTPUT
          
      - name: 加入Tailscale私有网络
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:githubactions
          version: latest

      - name: 查看IP地址
        id: get_local_ip
        run: |
          ip a
          LOCAL_IP=$(ip -o -4 addr list | awk '/100\./ {print $4}' | cut -d/ -f1)
          echo "提取到本地 IP: ${LOCAL_IP}"
          echo "local_ip=${LOCAL_IP}" >> $GITHUB_OUTPUT

      - name: 部署Ollama
        run: |
          curl -fsSL https://ollama.com/install.sh | sh

          sudo mkdir -p /etc/systemd/system/ollama.service.d
          sudo mkdir -p ${{ github.workspace }}/models
          sudo chown ollama:ollama ${{ github.workspace }}/models
          echo -e "[Service]\nEnvironment=\"OLLAMA_HOST=0.0.0.0:11434\"" | sudo tee /etc/systemd/system/ollama.service.d/override.conf > /dev/null
          echo -e "BindPaths=${{ github.workspace }}/models:/usr/share/ollama/.ollama/models" | sudo tee -a /etc/systemd/system/ollama.service.d/override.conf > /dev/null
          echo -e "Environment=\"OLLAMA_KEEP_ALIVE=6h\"" | sudo tee -a /etc/systemd/system/ollama.service.d/override.conf > /dev/null
          cat /etc/systemd/system/ollama.service.d/override.conf
          sudo systemctl daemon-reload
          sudo systemctl restart ollama
          sleep 2
          journalctl -u ollama --no-pager

      - name: 部署选定模型
        run: |
          echo "开始大部署模型：${{ github.event.inputs.model }}"
          ollama run ${{ github.event.inputs.model }}
          echo "--------------------------硬盘信息--------------------------"
          echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

      - name: 发送 Telegram 通知
        run: |
          # 获取当前时间（UTC+8 时区，北京时间）
          current_time=$(date -u +"%Y-%m-%d %H:%M:%S" -d "8 hour")

          # 构造 Telegram 消息
          message=$(cat <<EOF
          <b>🚀 大模型部署成功 🎉</b>

          🖥️ <b>公网 IP:</b> <code>${{ steps.check_server.outputs.public_ip }}</code>  
          🏠 <b>本地 IP:</b> <code>${{ steps.get_local_ip.outputs.local_ip }}</code>  
          🏙️ <b>城市:</b> <code>${{ steps.check_server.outputs.city }}</code>  
          🌍 <b>区域:</b> <code>${{ steps.check_server.outputs.region }}</code>  
          🗺️ <b>国家:</b> <code>${{ steps.check_server.outputs.country }}</code>  
          📍 <b>地理位置:</b> <code>${{ steps.check_server.outputs.loc }}</code>  
          🏢 <b>组织:</b> <code>${{ steps.check_server.outputs.org }}</code>  
          📮 <b>邮政编码:</b> <code>${{ steps.check_server.outputs.postal }}</code>  
          ⏰ <b>时区:</b> <code>${{ steps.check_server.outputs.timezone }}</code>  

          🤖 <b>部署大模型:</b> <code>${{ github.event.inputs.model }}</code>  
          🔗 <b>Ollama API 地址:</b> <code>http://${{ steps.get_local_ip.outputs.local_ip }}:11434</code>  

          🕒 <b>当前时间:</b> <code>$current_time</code>  
          EOF
          )

          # 进行 URL 编码
          message=$(echo "$message" | jq -sRr @uri)

          # 发送 Telegram 消息
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
               -d "chat_id=${{ secrets.TELEGRAM_TO }}" \
               -d "parse_mode=HTML" \
               -d "text=$message"


      - name: 启动SSH终端
        uses: mxschmitt/action-tmate@v3

  DeployWEB:
    runs-on: ubuntu-latest
    steps:
      - name: 最大化磁盘空间
        uses: easimon/maximize-build-space@master
        with:
          overprovision-lvm: 'true'
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: 迁出代码
        uses: actions/checkout@v3

      - name: 检查服务器配置
        id: check_server
        run: |
          echo -e "已知CPU型号(性能降序): 7763，8370C，8272CL，8171M，E5-2673\n"
          echo "--------------------------CPU信息--------------------------"
          echo "CPU物理数量: $(cat /proc/cpuinfo | grep 'physical id' | sort | uniq | wc -l)"
          echo "CPU核心数量: $(nproc)"
          echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
          echo "--------------------------内存信息--------------------------"
          echo "已安装内存详细信息:"
          echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
          echo "--------------------------硬盘信息--------------------------"
          echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT
          echo "--------------------------网络信息--------------------------"
          curl -s -4 ipinfo.io > raw_net_info
          cat raw_net_info | jq -r '
            "IP地址           \(.ip)\n" +
            "所在城市         \(.city)\n" +
            "所在区域         \(.region)\n" +
            "国家             \(.country)\n" +
            "地理位置         \(.loc)\n" +
            "组织             \(.org)\n" +
            "邮政编码         \(.postal)\n" +
            "所在时区         \(.timezone)\n"'

          echo "public_ip=$(cat raw_net_info | jq -r '.ip')" >> $GITHUB_OUTPUT
          echo "city=$(cat raw_net_info | jq -r '.city')" >> $GITHUB_OUTPUT
          echo "region=$(cat raw_net_info | jq -r '.region')" >> $GITHUB_OUTPUT
          echo "country=$(cat raw_net_info | jq -r '.country')" >> $GITHUB_OUTPUT
          echo "loc=$(cat raw_net_info | jq -r '.loc')" >> $GITHUB_OUTPUT
          echo "org=$(cat raw_net_info | jq -r '.org')" >> $GITHUB_OUTPUT
          echo "postal=$(cat raw_net_info | jq -r '.postal')" >> $GITHUB_OUTPUT
          echo "timezone=$(cat raw_net_info | jq -r '.timezone')" >> $GITHUB_OUTPUT
          
      - name: 加入Tailscale私有网络
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:githubactions
          version: latest

      - name: 查看IP地址
        id: get_local_ip
        run: |
          ip a
          LOCAL_IP=$(ip -o -4 addr list | awk '/100\./ {print $4}' | cut -d/ -f1)
          echo "提取到本地 IP: ${LOCAL_IP}"
          echo "local_ip=${LOCAL_IP}" >> $GITHUB_OUTPUT

      - name: 部署Ollama
        run: |
          curl -fsSL https://ollama.com/install.sh | sh

          sudo mkdir -p /etc/systemd/system/ollama.service.d
          sudo mkdir -p ${{ github.workspace }}/models
          sudo chown ollama:ollama ${{ github.workspace }}/models
          echo -e "[Service]\nEnvironment=\"OLLAMA_HOST=0.0.0.0:11434\"" | sudo tee /etc/systemd/system/ollama.service.d/override.conf > /dev/null
          echo -e "BindPaths=${{ github.workspace }}/models:/usr/share/ollama/.ollama/models" | sudo tee -a /etc/systemd/system/ollama.service.d/override.conf > /dev/null
          echo -e "Environment=\"OLLAMA_KEEP_ALIVE=6h\"" | sudo tee -a /etc/systemd/system/ollama.service.d/override.conf > /dev/null
          cat /etc/systemd/system/ollama.service.d/override.conf
          sudo systemctl daemon-reload
          sudo systemctl restart ollama
          sleep 2
          journalctl -u ollama --no-pager

      - name: 部署嵌入模型
        run: |
          echo "开始部署模型：${{ github.event.inputs.embedding_model }}"
          ollama pull ${{ github.event.inputs.embedding_model }}
          echo "--------------------------硬盘信息--------------------------"
          echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

      - name: 部署 Dify
        run: |
          git clone https://github.com/langgenius/dify.git
          cd dify
          # git checkout $(git describe --tags $(git rev-list --tags --max-count=1))
          cd docker
          cp .env.example .env
          sed -i 's/UPLOAD_FILE_SIZE_LIMIT=15/UPLOAD_FILE_SIZE_LIMIT=1000/' .env
          sed -i 's/UPLOAD_FILE_BATCH_LIMIT=5/UPLOAD_FILE_BATCH_LIMIT=50/' .env
          sed -i 's/NGINX_CLIENT_MAX_BODY_SIZE=15M/NGINX_CLIENT_MAX_BODY_SIZE=1000M/' .env
          docker compose up -d
          echo "地址：IP:80"
          echo "--------------------------硬盘信息--------------------------"
          echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

      # - name: 部署 Open WebUI
      #   run: |
      #     echo "开始部署Open WebUI:"
      #     docker run -d --network=host -v open-webui:/app/backend/data -e OLLAMA_BASE_URL=http://127.0.0.1:11434 --name open-webui --restart always ghcr.io/open-webui/open-webui:main
      #     echo "地址：IP:8080"

      # - name: 部署 Apache Tika
      #   run: |
      #     echo "开始部署Apache Tika:"
      #     docker run -d --name tika -p 9998:9998 --restart unless-stopped apache/tika:latest-full
      #     echo "地址：IP:9998"

      - name: 查看容器状态
        run: |
          docker ps -a

      - name: 发送 Telegram 通知
        run: |
          # 获取当前时间（UTC+8 时区，北京时间）
          current_time=$(date -u +"%Y-%m-%d %H:%M:%S" -d "8 hour")

          # 构造 Telegram 消息
          # 🌐 <b>Open WebUI:</b> <code>http://${{ steps.get_local_ip.outputs.local_ip }}:8080</code>  
          # 🪶 <b>Apache Tika 地址:</b> <code>http://${{ steps.get_local_ip.outputs.local_ip }}:9998</code>  
          message=$(cat <<EOF
          <b>🚀 大模型WEBUI部署成功 🎉</b>

          🖥️ <b>公网 IP:</b> <code>${{ steps.check_server.outputs.public_ip }}</code>  
          🏠 <b>本地 IP:</b> <code>${{ steps.get_local_ip.outputs.local_ip }}</code>  
          🏙️ <b>城市:</b> <code>${{ steps.check_server.outputs.city }}</code>  
          🌍 <b>区域:</b> <code>${{ steps.check_server.outputs.region }}</code>  
          🗺️ <b>国家:</b> <code>${{ steps.check_server.outputs.country }}</code>  
          📍 <b>地理位置:</b> <code>${{ steps.check_server.outputs.loc }}</code>  
          🏢 <b>组织:</b> <code>${{ steps.check_server.outputs.org }}</code>  
          📮 <b>邮政编码:</b> <code>${{ steps.check_server.outputs.postal }}</code>  
          ⏰ <b>时区:</b> <code>${{ steps.check_server.outputs.timezone }}</code>  

          🛠️ <b>部署嵌入模型:</b> <code>${{ github.event.inputs.embedding_model }}</code>  
          🔗 <b>Ollama API 地址:</b> <code>http://${{ steps.get_local_ip.outputs.local_ip }}:11434</code>  
          🏗️ <b>Dify 地址:</b> <code>http://${{ steps.get_local_ip.outputs.local_ip }}</code>  


          🕒 <b>当前时间:</b> <code>$current_time</code>  
          EOF
          )

          # 进行 URL 编码
          message=$(echo "$message" | jq -sRr @uri)

          # 发送 Telegram 消息
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
               -d "chat_id=${{ secrets.TELEGRAM_TO }}" \
               -d "parse_mode=HTML" \
               -d "text=$message"


      - name: 启动SSH终端
        uses: mxschmitt/action-tmate@v3


  DeployRAG:
    runs-on: ubuntu-latest
    steps:
      - name: 最大化磁盘空间
        uses: easimon/maximize-build-space@master
        with:
          overprovision-lvm: 'true'
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: 迁出代码
        uses: actions/checkout@v3

      - name: 检查服务器配置
        id: check_server
        run: |
          echo -e "已知CPU型号(性能降序): 7763，8370C，8272CL，8171M，E5-2673\n"
          echo "--------------------------CPU信息--------------------------"
          echo "CPU物理数量: $(cat /proc/cpuinfo | grep 'physical id' | sort | uniq | wc -l)"
          echo "CPU核心数量: $(nproc)"
          echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
          echo "--------------------------内存信息--------------------------"
          echo "已安装内存详细信息:"
          echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
          echo "--------------------------硬盘信息--------------------------"
          echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT
          echo "--------------------------网络信息--------------------------"
          curl -s -4 ipinfo.io > raw_net_info
          cat raw_net_info | jq -r '
            "IP地址           \(.ip)\n" +
            "所在城市         \(.city)\n" +
            "所在区域         \(.region)\n" +
            "国家             \(.country)\n" +
            "地理位置         \(.loc)\n" +
            "组织             \(.org)\n" +
            "邮政编码         \(.postal)\n" +
            "所在时区         \(.timezone)\n"'

          echo "public_ip=$(cat raw_net_info | jq -r '.ip')" >> $GITHUB_OUTPUT
          echo "city=$(cat raw_net_info | jq -r '.city')" >> $GITHUB_OUTPUT
          echo "region=$(cat raw_net_info | jq -r '.region')" >> $GITHUB_OUTPUT
          echo "country=$(cat raw_net_info | jq -r '.country')" >> $GITHUB_OUTPUT
          echo "loc=$(cat raw_net_info | jq -r '.loc')" >> $GITHUB_OUTPUT
          echo "org=$(cat raw_net_info | jq -r '.org')" >> $GITHUB_OUTPUT
          echo "postal=$(cat raw_net_info | jq -r '.postal')" >> $GITHUB_OUTPUT
          echo "timezone=$(cat raw_net_info | jq -r '.timezone')" >> $GITHUB_OUTPUT
          
      - name: 加入Tailscale私有网络
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:githubactions
          version: latest

      - name: 查看IP地址
        id: get_local_ip
        run: |
          ip a
          LOCAL_IP=$(ip -o -4 addr list | awk '/100\./ {print $4}' | cut -d/ -f1)
          echo "提取到本地 IP: ${LOCAL_IP}"
          echo "local_ip=${LOCAL_IP}" >> $GITHUB_OUTPUT

      - name: 部署 RAGFlow
        run: |
          echo "开始部署 RAGFlow:"
          sysctl vm.max_map_count
          sudo sysctl -w vm.max_map_count=262144
          git clone https://github.com/infiniflow/ragflow.git
          cd ragflow/docker
          sed -i 's/-slim//' .env
          docker compose -f docker-compose.yml up -d
          sleep 20
          docker logs ragflow-server
          docker ps -a


      - name: 发送 Telegram 通知
        run: |
          # 🤖 <b>MaxKB 地址:</b> <code>http://${{ steps.get_local_ip.outputs.local_ip }}:6060</code>  
          # 获取当前时间（UTC+8 时区，北京时间）
          current_time=$(date -u +"%Y-%m-%d %H:%M:%S" -d "8 hour")

          # 构造 Telegram 消息
          message=$(cat <<EOF
          <b>🚀 大模型RAG部署成功 🎉</b>

          🖥️ <b>公网 IP:</b> <code>${{ steps.check_server.outputs.public_ip }}</code>  
          🏠 <b>本地 IP:</b> <code>${{ steps.get_local_ip.outputs.local_ip }}</code>  
          🏙️ <b>城市:</b> <code>${{ steps.check_server.outputs.city }}</code>  
          🌍 <b>区域:</b> <code>${{ steps.check_server.outputs.region }}</code>  
          🗺️ <b>国家:</b> <code>${{ steps.check_server.outputs.country }}</code>  
          📍 <b>地理位置:</b> <code>${{ steps.check_server.outputs.loc }}</code>  
          🏢 <b>组织:</b> <code>${{ steps.check_server.outputs.org }}</code>  
          📮 <b>邮政编码:</b> <code>${{ steps.check_server.outputs.postal }}</code>  
          ⏰ <b>时区:</b> <code>${{ steps.check_server.outputs.timezone }}</code>  

          🌊 <b>RAGFlow 地址:</b> <code>http://${{ steps.get_local_ip.outputs.local_ip }}</code>

          🕒 <b>当前时间:</b> <code>$current_time</code>  
          EOF
          )

          # 进行 URL 编码
          message=$(echo "$message" | jq -sRr @uri)

          # 发送 Telegram 消息
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
               -d "chat_id=${{ secrets.TELEGRAM_TO }}" \
               -d "parse_mode=HTML" \
               -d "text=$message"


      - name: 启动SSH终端
        uses: mxschmitt/action-tmate@v3

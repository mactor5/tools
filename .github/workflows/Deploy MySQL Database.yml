name: Deploy MySQL Database

on:
  workflow_dispatch:
    inputs:
      mysql_version:
        description: 'MySQL版本'
        required: true
        default: 'lts'
      log_switch:
        description: '是否开启日志'
        required: true
        default: 'true'
        type: choice
        options:
          - "true"
          - "false"

jobs:
  Server:
    runs-on: ubuntu-latest
    steps:
      - name: 迁出代码
        uses: actions/checkout@v3
        
      - name: 检查服务器配置
        id: check_server
        run: |
          echo -e "已知CPU型号(性能降序): 7763，8370C，8272CL，8171M，E5-2673\n"
          echo "--------------------------CPU信息--------------------------"
          echo "CPU物理数量: $(cat /proc/cpuinfo | grep 'physical id' | sort | uniq | wc -l)"
          echo "CPU核心数量: $(nproc)"
          echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
          echo "--------------------------内存信息--------------------------"
          echo "已安装内存详细信息:"
          echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
          echo "--------------------------硬盘信息--------------------------"
          echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT
          echo "--------------------------网络信息--------------------------"
          curl -s -4 ipinfo.io > raw_net_info
          cat raw_net_info | jq -r '
            "IP地址           \(.ip)\n" +
            "所在城市         \(.city)\n" +
            "所在区域         \(.region)\n" +
            "国家             \(.country)\n" +
            "地理位置         \(.loc)\n" +
            "组织             \(.org)\n" +
            "邮政编码         \(.postal)\n" +
            "所在时区         \(.timezone)\n"' 

          echo "public_ip=$(cat raw_net_info | jq -r '.ip')" >> $GITHUB_OUTPUT
          echo "city=$(cat raw_net_info | jq -r '.city')" >> $GITHUB_OUTPUT
          echo "region=$(cat raw_net_info | jq -r '.region')" >> $GITHUB_OUTPUT
          echo "country=$(cat raw_net_info | jq -r '.country')" >> $GITHUB_OUTPUT
          echo "loc=$(cat raw_net_info | jq -r '.loc')" >> $GITHUB_OUTPUT
          echo "org=$(cat raw_net_info | jq -r '.org')" >> $GITHUB_OUTPUT
          echo "postal=$(cat raw_net_info | jq -r '.postal')" >> $GITHUB_OUTPUT
          echo "timezone=$(cat raw_net_info | jq -r '.timezone')" >> $GITHUB_OUTPUT

      - name: 加入Tailscale私有网络
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:githubactions
          version: latest

      - name: 查看IP地址
        id: get_local_ip
        run: |
          ip a
          LOCAL_IP=$(ip -o -4 addr list | awk '/100\./ {print $4}' | cut -d/ -f1)
          echo "提取到本地 IP: ${LOCAL_IP}"
          echo "local_ip=${LOCAL_IP}" >> $GITHUB_OUTPUT

      - name: 部署 Mysql 数据库
        run: |
          mkdir -p ${{ github.workspace }}/mysql/{data,conf,log}
          if [ "${{ github.event.inputs.log_switch }}" == "true" ]; then
            cat > ${{ github.workspace }}/mysql/conf/my.cnf << 'EOF'
          [mysqld]
          # 错误日志
          log_error = /var/log/mysql/error.log

          # 通用查询日志
          general_log = 1
          general_log_file = /var/log/mysql/mysql.log

          # 慢查询日志
          slow_query_log = 1
          slow_query_log_file = /var/log/mysql/mysql-slow.log
          long_query_time = 2

          # 二进制日志
          log_bin = /var/lib/mysql/mysql-bin
          server_id = 1
          EOF
          else
            touch ${{ github.workspace }}/mysql/conf/my.cnf
          fi
          cat > docker-compose.yml << 'EOF'
          services:
            mysql:
              image: mysql:${{ github.event.inputs.mysql_version }}
              container_name: mysql
              restart: unless-stopped
              ports:
                - "3306:3306"
              environment:
                MYSQL_ROOT_PASSWORD: ${{ secrets.WINPASS }}          
              volumes:
                - ${{ github.workspace }}/mysql/data/:/var/lib/mysql
                - ${{ github.workspace }}/mysql/conf/my.cnf:/etc/my.cnf
                - ${{ github.workspace }}/mysql/log:/var/log/mysql
                - /etc/timezone:/etc/timezone:ro
                - /etc/localtime:/etc/localtime:ro

          EOF

          sudo docker compose up -d
          sudo docker ps -a 


      - name: 发送 Telegram 通知
        run: |
          # 获取当前时间（UTC+8 时区，北京时间）
          current_time=$(date -u +"%Y-%m-%d %H:%M:%S" -d "8 hour")

          # 构造 Telegram 消息
          message=$(cat <<EOF
          <b>🚀 MySQL数据库部署成功 🎉</b>

          🖥️ <b>公网 IP:</b> <code>${{ steps.check_server.outputs.public_ip }}</code>  
          🏠 <b>本地 IP:</b> <code>${{ steps.get_local_ip.outputs.local_ip }}</code>  
          🏙️ <b>城市:</b> <code>${{ steps.check_server.outputs.city }}</code>  
          🌍 <b>区域:</b> <code>${{ steps.check_server.outputs.region }}</code>  
          🗺️ <b>国家:</b> <code>${{ steps.check_server.outputs.country }}</code>  
          📍 <b>地理位置:</b> <code>${{ steps.check_server.outputs.loc }}</code>  
          🏢 <b>组织:</b> <code>${{ steps.check_server.outputs.org }}</code>  
          📮 <b>邮政编码:</b> <code>${{ steps.check_server.outputs.postal }}</code>  
          ⏰ <b>时区:</b> <code>${{ steps.check_server.outputs.timezone }}</code>  

          🏠 <b>MySQL地址:</b> <code>${{ steps.get_local_ip.outputs.local_ip }}:3306</code>  
          🐱 <b>Navicat URL地址:</b> <code>navicat://conn.mysql?Conn.Host=${{ steps.get_local_ip.outputs.local_ip }}&Conn.Name=MySQL%20Actions&Conn.Port=3306&Conn.UseHTTP=false&Conn.UseSSH=false&Conn.UseSSL=false&Conn.UseSocketFile=false&Conn.Username=root</code>  

          🕒 <b>当前时间:</b> <code>$current_time</code>  
          EOF
          )

          # 进行 URL 编码
          message=$(echo "$message" | jq -sRr @uri)

          # 发送 Telegram 消息
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
               -d "chat_id=${{ secrets.TELEGRAM_TO }}" \
               -d "parse_mode=HTML" \
               -d "text=$message"

      - name: 启动SSH终端
        uses: mxschmitt/action-tmate@v3

      - name: 打包数据库文件
        run: |
          sudo docker ps -a 
          sudo docker stop mysql
          sudo 7z a mysql.7z ${{ github.workspace }}/mysql -p${{ secrets.WINPASS }} -mhe -t7z
      
      - name : 上传固件
        uses: actions/upload-artifact@v4
        with:
          name: MySQL Backup
          path: mysql.7z


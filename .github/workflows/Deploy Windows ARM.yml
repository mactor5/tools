name: Deploy Windows ARM

on:
  workflow_dispatch:

jobs:
  Server:
    runs-on: windows-11-arm
    steps:
      - name: 迁出代码
        uses: actions/checkout@v3

      - name: 加入Tailscale私有网络
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:githubactions
          version: latest

      - name: 获取本地IP地址
        shell: pwsh
        run: |
          (Get-NetIPAddress | Where-Object {$_.IPAddress -match '^100\.'}).IPAddress > local_ip.txt
          cat local_ip.txt 

      - name: 关闭防火墙
        shell: pwsh
        run: |
          Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled False

      - name: 格式化磁盘
        shell: pwsh
        run: |
          # 获取 Disk 0
          $disk = Get-Disk -Number 0

          # 检查是否已初始化
          if ($disk.PartitionStyle -eq 'RAW') {
            Write-Host "Initializing Disk 0..."
            Initialize-Disk -Number 0 -PartitionStyle GPT -PassThru | Out-Null
          } else {
            Write-Host "Disk 0 is already initialized."
          }

          # 创建新分区（占用全部空间）
          $partition = New-Partition -DiskNumber 0 -UseMaximumSize -AssignDriveLetter

          # 格式化为 NTFS 文件系统
          Format-Volume -Partition $partition -FileSystem NTFS -NewFileSystemLabel "DataDisk" -Confirm:$false
          
          Write-Host "Disk 0 has been initialized and formatted successfully."

          mkdir D:\upload
        
      - name: 开启BBR
        shell: pwsh
        run: |
          Get-NetTCPSetting | Select SettingName, CongestionProvider
          netsh int tcp set supplemental Template=Internet CongestionProvider=bbr2
          netsh int tcp set supplemental Template=Datacenter CongestionProvider=bbr2
          netsh int tcp set supplemental Template=Compat CongestionProvider=bbr2
          netsh int tcp set supplemental Template=DatacenterCustom CongestionProvider=bbr2
          netsh int tcp set supplemental Template=InternetCustom CongestionProvider=bbr2
          Get-NetTCPSetting | Select SettingName, CongestionProvider

      - name: 开启隐藏文件和后缀显示
        shell: pwsh
        run: |
          reg add "HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v Hidden /t REG_DWORD /d 1 /f
          reg add "HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v HideFileExt /t REG_DWORD /d 0 /f
          reg add "HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v LaunchTo /t REG_DWORD /d 2 /f
          taskkill /f /im explorer.exe && start explorer.exe
          reg load HKU\DefaultUser "C:\Users\Default\NTUSER.DAT"
          reg add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v Hidden /t REG_DWORD /d 1 /f
          reg add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v HideFileExt /t REG_DWORD /d 0 /f
          reg add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v LaunchTo /t REG_DWORD /d 2 /f
          reg unload HKU\DefaultUser

      # - name: 卸载OneDrive
      #   shell: pwsh
      #   run: |
      #     Takeown /f "C:\Windows\SysWOW64\OneDriveSetup.exe"
      #     icacls "C:\Windows\SysWOW64\OneDriveSetup.exe" /grant administrators:F
      #     Remove-Item -Path "C:\Windows\SysWOW64\OneDriveSetup.exe" -Force

      - name: 设置本地用户
        shell: cmd
        run: |
          net user %USERNAME% ${{ secrets.WINPASS }}
          net user AD dd /add
          net localgroup Administrators AD /add

      - name: 查看IP地址
        shell: bash
        id: get_local_ip
        run: |
          curl -s -4 ipinfo.io > raw_net_info
          cat raw_net_info | jq -r '
            "IP地址           \(.ip)\n" +
            "所在城市         \(.city)\n" +
            "所在区域         \(.region)\n" +
            "国家             \(.country)\n" +
            "地理位置         \(.loc)\n" +
            "组织             \(.org)\n" +
            "邮政编码         \(.postal)\n" +
            "所在时区         \(.timezone)\n"'

          echo "public_ip=$(cat raw_net_info | jq -r '.ip')" >> $GITHUB_OUTPUT
          echo "city=$(cat raw_net_info | jq -r '.city')" >> $GITHUB_OUTPUT
          echo "region=$(cat raw_net_info | jq -r '.region')" >> $GITHUB_OUTPUT
          echo "country=$(cat raw_net_info | jq -r '.country')" >> $GITHUB_OUTPUT
          echo "loc=$(cat raw_net_info | jq -r '.loc')" >> $GITHUB_OUTPUT
          echo "org=$(cat raw_net_info | jq -r '.org')" >> $GITHUB_OUTPUT
          echo "postal=$(cat raw_net_info | jq -r '.postal')" >> $GITHUB_OUTPUT
          echo "timezone=$(cat raw_net_info | jq -r '.timezone')" >> $GITHUB_OUTPUT
          echo "local_ip=$(cat local_ip.txt )" >> $GITHUB_OUTPUT

      - name: 发送 Telegram 通知
        shell: pwsh
        run: |
          # 获取当前时间（UTC+8 时区，北京时间）
          $current_time = (Get-Date).ToUniversalTime().AddHours(8).ToString("yyyy-MM-dd HH:mm:ss")

          $message = @"
          <b>🚀 Windows 11 ARM64 部署成功 🎉</b>

          🖥️ <b>公网 IP:</b> <code>${{ steps.get_local_ip.outputs.public_ip }}</code>  
          🏠 <b>本地 IP:</b> <code>${{ steps.get_local_ip.outputs.local_ip }}</code>  
          🏙️ <b>城市:</b> <code>${{ steps.get_local_ip.outputs.city }}</code>  
          🌍 <b>区域:</b> <code>${{ steps.get_local_ip.outputs.region }}</code>  
          🗺️ <b>国家:</b> <code>${{ steps.get_local_ip.outputs.country }}</code>  
          📍 <b>地理位置:</b> <code>${{ steps.get_local_ip.outputs.loc }}</code>  
          🏢 <b>组织:</b> <code>${{ steps.get_local_ip.outputs.org }}</code>  
          📮 <b>邮政编码:</b> <code>${{ steps.get_local_ip.outputs.postal }}</code>  
          ⏰ <b>时区:</b> <code>${{ steps.get_local_ip.outputs.timezone }}</code>  

          🕒 <b>当前时间:</b> <code>$current_time</code>  
          "@

          $message = [uri]::EscapeDataString($message)

          curl.exe -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" `
               -d "chat_id=${{ secrets.TELEGRAM_TO }}" `
               -d "parse_mode=HTML" `
               -d "text=$message"

      - name: 安装MSYS2
        id: setup-msys2
        uses: msys2/setup-msys2@v2
      - name: 启动SSH终端
        uses: mxschmitt/action-tmate@v3
        with:
          msys2-location: ${{ steps.setup-msys2.outputs.msys2-location }}

      - name: 上传文件
        uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: my-artifact
          path: D:\upload
        

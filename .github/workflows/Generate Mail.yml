name: Generate Mail

on:
  workflow_dispatch:
    inputs:
      name:
        description: '邮箱名称'
        required: true
        default: 'mail'

jobs:
  Server:
    runs-on: ubuntu-latest
    steps:
      - name: 迁出代码
        uses: actions/checkout@v3
        
      - name: 检查服务器配置
        id: check_server
        run: |
          echo -e "已知CPU型号(性能降序): 7763，8370C，8272CL，8171M，E5-2673\n"
          echo "--------------------------CPU信息--------------------------"
          echo "CPU物理数量: $(cat /proc/cpuinfo | grep 'physical id' | sort | uniq | wc -l)"
          echo "CPU核心数量: $(nproc)"
          echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
          echo "--------------------------内存信息--------------------------"
          echo "已安装内存详细信息:"
          echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
          echo "--------------------------硬盘信息--------------------------"
          echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT
          echo "--------------------------网络信息--------------------------"
          curl -s -4 ipinfo.io > raw_net_info
          cat raw_net_info | jq -r '
            "IP地址           \(.ip)\n" +
            "所在城市         \(.city)\n" +
            "所在区域         \(.region)\n" +
            "国家             \(.country)\n" +
            "地理位置         \(.loc)\n" +
            "组织             \(.org)\n" +
            "邮政编码         \(.postal)\n" +
            "所在时区         \(.timezone)\n"'

      - name: 生成代码
        id: generate_Code
        run: |
          cat > gen.py << 'EOF'
          import requests
          import argparse
          import json

          # 解析命令行参数
          parser = argparse.ArgumentParser(description="生成临时邮箱")
          parser.add_argument("name", type=str, help="请输入邮箱用户名")
          args = parser.parse_args()

          # 请求的 URL
          url = "${{ secrets.EDU_API_URL }}"

          # 请求体数据 (payload)
          payload = {
            "name": args.name,
            "expiryTime": 0,
            "domain": "${{ secrets.EDU_DOMAIN }}",
          }

          # 设置请求头
          # 包含 Content-Type 和 X-API-Key
          headers = {
            'Content-Type': 'application/json',
            'X-API-Key': '${{ secrets.EDU_API_TOKEN }}' 
          }

          try:
            # 发送 POST 请求
            response = requests.post(url, json=payload, headers=headers)

            # 检查请求是否成功 (状态码 2xx)
            response.raise_for_status() # 如果状态码不是 2xx，会抛出 HTTPError 异常

            # 格式化并输出 JSON 响应
            json_response = response.json()
            print("生成成功:")
            print(json.dumps(json_response, indent=2, ensure_ascii=False))

          except requests.exceptions.RequestException as e:
            print(f"请求失败: {e}")
          EOF

          python gen.py ${{ github.event.inputs.name }} >> opt.txt
          echo 生成成功

      - name: 发送通知
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message_file: opt.txt

        

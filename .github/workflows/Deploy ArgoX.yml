name: Deploy ArgoX

on:
  workflow_dispatch:
    inputs:
      cdn_server:
        description: 'CDN SERVER'
        required: true
        default: 'ip.sb'

jobs:
  Server:
    runs-on: ubuntu-latest
    steps:
      - name: 迁出代码
        uses: actions/checkout@v3
        
      - name: 检查服务器配置
        id: check_server
        run: |
          echo -e "已知CPU型号(性能降序): 7763，8370C，8272CL，8171M，E5-2673\n"
          echo "--------------------------CPU信息--------------------------"
          echo "CPU物理数量: $(cat /proc/cpuinfo | grep 'physical id' | sort | uniq | wc -l)"
          echo "CPU核心数量: $(nproc)"
          echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
          echo "--------------------------内存信息--------------------------"
          echo "已安装内存详细信息:"
          echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
          echo "--------------------------硬盘信息--------------------------"
          echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT
          echo "--------------------------网络信息--------------------------"
          curl -s -4 ipinfo.io > raw_net_info
          cat raw_net_info | jq -r '
            "IP地址           \(.ip)\n" +
            "所在城市         \(.city)\n" +
            "所在区域         \(.region)\n" +
            "国家             \(.country)\n" +
            "地理位置         \(.loc)\n" +
            "组织             \(.org)\n" +
            "邮政编码         \(.postal)\n" +
            "所在时区         \(.timezone)\n"' 

          echo "public_ip=$(cat raw_net_info | jq -r '.ip')" >> $GITHUB_OUTPUT
          echo "city=$(cat raw_net_info | jq -r '.city')" >> $GITHUB_OUTPUT
          echo "region=$(cat raw_net_info | jq -r '.region')" >> $GITHUB_OUTPUT
          echo "country=$(cat raw_net_info | jq -r '.country')" >> $GITHUB_OUTPUT
          echo "loc=$(cat raw_net_info | jq -r '.loc')" >> $GITHUB_OUTPUT
          echo "org=$(cat raw_net_info | jq -r '.org')" >> $GITHUB_OUTPUT
          echo "postal=$(cat raw_net_info | jq -r '.postal')" >> $GITHUB_OUTPUT
          echo "timezone=$(cat raw_net_info | jq -r '.timezone')" >> $GITHUB_OUTPUT

      - name: 开启BBR
        run: |
          sudo modprobe tcp_bbr
          sudo echo "tcp_bbr" | sudo tee --append /etc/modules-load.d/modules.conf
          sudo echo "net.core.default_qdisc=fq" | sudo tee --append /etc/sysctl.conf
          sudo echo "net.ipv4.tcp_congestion_control=bbr" | sudo tee --append /etc/sysctl.conf
          sudo sysctl -p
          sudo sysctl net.ipv4.tcp_available_congestion_control
          sudo sysctl net.ipv4.tcp_congestion_control

      - name: 安装 ArgoX
        run: |
          cat > config.conf << 'EOF'
          # 使用说明 / Usage:
          # 1. 复制此文件并重命名为 config.conf / Copy this file and rename it to config.conf
          # 2. 根据需要修改配置参数 / Modify the configuration parameters as needed
          # 3. 执行安装命令 / Run the installation command:
          #    bash <(wget -qO- https://raw.githubusercontent.com/fscarmen/ArgoX/main/sing-box.sh) -f config.conf

          # 配置文件说明 / Configuration Description:

          # 语言选项 / Language option: 
          # C 为中文 / C for Chinese
          # E 为英文 / E for English
          # 留空默认为英文 / Default is English if left empty
          L='C'

          # 服务器 IP 地址，支持 IPv4 或 IPv6 / Server IP address, supports IPv4 or IPv6
          # 例如 / For example: IPv4: 123.123.123.123; IPv6: 2a01:4f8:272:5aa1:dc88:ff6e:5305:1234
          SERVER_IP=''

          # Argo 配置 / Argo Configuration
          # Argo 域名设置 / Argo domain settings
          # 例如 / For example: ARGO_DOMAIN='argo.xray.com'
          # 留空则使用临时隧道 / Use temporary tunnel if left empty
          ARGO_DOMAIN=''

          # Argo 认证信息 / Argo authentication info
          # JSON 格式示例 / JSON format example: 
          # ARGO_AUTH='{"AccountTag":"9cc9e3e4dag29d2a02e297f14f20513a","TunnelSecret":"vRzeQmSagqjCoQ0mzvl0qDR8dVROE889m0TnbZhJKHs=","TunnelID":"acd8c712-b088-4660-8187-e69abfa38443"}'
          # Token 格式示例 / Token format example:
          # ARGO_AUTH='eyJhIjoiOWNjOWUzZTRkOGYyOWQyYTAyZTI5N2YxNagyFzUxM2EiLCJ0IjoiYTcyMmUwNjYtODlmYi00ZjJmLTgagDQtOGEwOTVhNTkzM2I2IiwicyI6Ik9XTTFaak0xWWprdE16QTRNQzAwTUdVMExUbGlaV0V0TmpFek9UZzFNRGczWkdRNCJ9'
          # 留空则使用临时隧道 / Use temporary tunnel if left empty
          ARGO_AUTH=''

          # Xray 配置 / Xray Configuration
          # Reality 端口 / Reality port
          # 留空则随机生成 / Random generation if left empty
          REALITY_PORT=''

          # Reality 私钥 / Reality private key
          # 留空则随机生成 / Random generation if left empty
          REALITY_PRIVATE=''

          # Reality 公钥 / Reality public key
          # 留空则随机生成 / Random generation if left empty
          REALITY_PUBLIC=''

          # 服务器域名 / Server domain
          # 留空则使用脚本附带的第一个CDN SERVER / Default to use the first CDN SERVER provided by the script if left empty
          SERVER='${{ github.event.inputs.cdn_server }}'

          # 用户 UUID / User UUID
          # 留空则随机生成 / Random generation if left empty
          UUID=''

          # WebSocket 路径 / WebSocket path
          # 留空则默认为 argox / Default is argox if left empty
          WS_PATH=''

          # 节点名称 / Node name
          # 留空则默认使用 VPS hostname / Default to VPS hostname if left empty
          NODE_NAME=''

          # 订阅配置 / Subscribe Configuration
          # 是否安装 Nginx 用于订阅 / Install Nginx for subscription or not [y/n]
          # 默认为 y / Default is y
          INSTALL_NGINX='n'
          EOF

          wget https://raw.githubusercontent.com/fscarmen/argox/main/argox.sh
          chmod +x argox.sh
          sudo ./argox.sh -f config.conf >> /dev/null ||echo "安装完成"
          sudo argox -n >> node.txt || echo "获取完成"
          awk 'NR==14' node.txt > new_node.txt


      - name: 发送 Telegram 通知
        run: |
          # 获取当前时间（UTC+8 时区，北京时间）
          current_time=$(date -u +"%Y-%m-%d %H:%M:%S" -d "8 hour")

          # 读取节点信息
          node_info=$(cat new_node.txt)

          # 构造 Telegram 消息
          message=$(cat <<EOF
          <b>🚀 节点部署成功 🎉</b>

          🖥️ <b>公网 IP:</b> <code>${{ steps.check_server.outputs.public_ip }}</code>  
          🏙️ <b>城市:</b> <code>${{ steps.check_server.outputs.city }}</code>  
          🌍 <b>区域:</b> <code>${{ steps.check_server.outputs.region }}</code>  
          🗺️ <b>国家:</b> <code>${{ steps.check_server.outputs.country }}</code>  
          📍 <b>地理位置:</b> <code>${{ steps.check_server.outputs.loc }}</code>  
          🏢 <b>组织:</b> <code>${{ steps.check_server.outputs.org }}</code>  
          📮 <b>邮政编码:</b> <code>${{ steps.check_server.outputs.postal }}</code>  
          ⏰ <b>时区:</b> <code>${{ steps.check_server.outputs.timezone }}</code>  

          📌 <b>节点连接信息:</b>  
          <code>$node_info</code>  
          
          🕒 <b>当前时间:</b> <code>$current_time</code>  
          EOF
          )

          # 进行 URL 编码
          message=$(echo "$message" | jq -sRr @uri)

          # 发送 Telegram 消息
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
               -d "chat_id=${{ secrets.TELEGRAM_TO }}" \
               -d "parse_mode=HTML" \
               -d "text=$message"  >> /dev/null
          echo "Telegram 消息发送成功"

      - name: 启动SSH终端
        uses: mxschmitt/action-tmate@v3
        timeout-minutes: 120

      - name: 发送提示
        if: ${{ always() }}
        run: |
          # 获取当前时间（UTC+8 时区，北京时间）
          current_time=$(date -u +"%Y-%m-%d %H:%M:%S" -d "8 hour")

          # 读取节点信息
          node_info=$(cat new_node.txt)

          # 构造 Telegram 消息
          message=$(cat <<EOF
          📌 <b>节点已关闭</b>  
          EOF
          )

          # 进行 URL 编码
          message=$(echo "$message" | jq -sRr @uri)

          # 发送 Telegram 消息
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
               -d "chat_id=${{ secrets.TELEGRAM_TO }}" \
               -d "parse_mode=HTML" \
               -d "text=$message"  >> /dev/null
          echo "Telegram 消息发送成功"